#!/bin/sh
# Copyright (c) 2021-2022 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# √Ä inclure dans son .shrc

gs()
{
	git status "$@"
}

gd()
{
	git diff --relative "$@"
}

gc()
{
	local titre="$1" ; shift
	case "$1" in
		*" "*) titre="$titre||$1" ; shift ;;
	esac
	git commit -m "`echo "$titre" | tr \| '\012'`" "$@"
}

gp()
{
	git fetch && git stash && git pull --rebase "$@" && git stash pop
}

gr()
{
	git fetch && git stash && git rebase "$@" && git stash pop
}

# git cherry-pick interactif.
# Utilisation: gcp <la branche dont on veut ramener des trucs sur l'actuelle>
gcp()
{
	local tete=`git log --pretty=format:%H -n 1`
	local b="`git symbolic-ref --short HEAD`"
	git branch -m "$b.bis" && git checkout -b "$b" "$1" && { git rebase -i "$tete" && git branch -d "$b.bis" || echo "[31m# Apr√®s finalisation, pensez √† un git branch -d $b.bis[0m" >&2 ; } || git branch -m "$b"
}

glog()
{
	# https://stackoverflow.com/a/13965459
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit "$@"
}

# git stash diff
gsd()
{
	git stash show -p "$@"
}

# git stash log
gsl()
{
	git stash list --date=local "$@"
}

# Git Anc√™tre R√©ellement Commun par Exploration
garce()
{
	# merge-base ne fait pas l'affaire.
	
	php "$HOME/src/scripts/rcs/garce.php" "$@"
}

# compareBranches
cb()
{
	local t=/tmp/temp.$$.cb b depuis rasage pos sep=: mode=couleur opglog=--color coul1 coul0
	[ "x$1" != x--nb ] || { mode=nb ; opglog= ; shift ; }
	
	#depuis="`git show-branch --merge-base "$@"`" # Cf. gare.php qui explique pourquoi cela ne marche pas.
	depuis="`garce "$@"`"
	rasage="`git log -n 1 --pretty=format:%P $depuis | sed -e '/^$/d' -e 's/^/^/' -e 's/ / ^/g'`"
	
	# Notre jolie trame avec graphe.
	# On veut tous les items des deux branches + leur anc√™tre commun (ce que ne fournit pas A..B).
	
	git log --graph $opglog --pretty=format:':%H:%h:%Creset - %s %C(cyan)(%cr)%C(yellow)%d%Creset' $rasage "$@" > $t.log
	
	# Cherchons tous les items port√©s explicitement par chaque branche.
	
	{
		echo "BEGIN{"
		
		echo "# ID d'items:"
		grep $sep < $t.log | cut -d $sep -f 3 | xargs git show | git patch-id | awk '{print "ids[\""$2"\"]=\""$1"\";"}'
		
		pos=0
		for b in "$@"
		do
			echo "# Originaux (par sur $b:"
			echo "delete modifs;"
			{
				git log --pretty=format:%H $depuis..$b
				echo
				git log -n 1 --pretty=format:%H $depuis
				echo
			} | sed -e '/^$/d' -e "s#^#modifs[\"#" -e 's#$#"]=1;#'
			echo "for(modif in modifs) o[\"$pos:\"modif] = 1;"
			echo "for(modif in modifs) r[\"$pos:\"ids[modif]] = 1;"
			pos=`expr $pos + 1`
		done
		
		echo "}"
		
		if [ $mode = couleur ]
		then
			coul1='"["(marques ~ /^[xX] *$/ ? "31" : (marques ~ /^  *[xX]/ ? "32" : "90"))"m"'
			coul0='"[0m"'
		else
			coul1='"["'
			coul0='"]"'
		fi
		cat <<TERMINE
{
	marques = "";
	for(n = -1; ++n < $pos;)
		marques = marques""(\$2 ? (o[n":"\$2] ? "X" : (r[n":"ids[\$2]] ? "x" : " ")) : " ");
	# S'il s'agit d'une topologie connue (√† droite mais pas √† gauche, etc.), on colore.
	sub(/$sep[^$sep]*/, "");
	sub(/$sep/, $coul1);
	sub(/$sep/, $coul0);
	print marques" "\$0;
}
TERMINE
	} > $t.awk
	
	awk -F "$sep" -f $t.awk < $t.log | less
	rm $t.*
}

# Git Soumission Comme Poussage (pour remettre la date de soumission √©gale √† la date de poussage, par exemple durant un git rebase -i)
gscp()
{
	GIT_COMMITTER_DATE="`git log --pretty=format:%ad -1`" \
	GIT_COMMITTER_NAME="`git log --pretty=format:%an -1`" \
	GIT_COMMITTER_EMAIL="`git log --pretty=format:%ae -1`" \
	git commit --amend --no-edit
}

# https://stackoverflow.com/questions/372506/how-can-i-search-git-branches-for-a-file-or-directory#comment23099369_372654
gfind()
{
	local b refs=refs/heads
	[ "x$1" = x-r ] && refs=refs/remotes && shift
	
	for b in `git for-each-ref --format="%(refname)" $refs`
	do
		git ls-tree -r --name-only $b | grep "$1" | sed -e "s#^#$b: #"
	done
}

#- Projets ---------------------------------------------------------------------
# Fonctionnement dans le cadre de rcs/shrc.

testi_git()
{
	[ -d "$1/.git" ] || return
	
	local init
	for init in $DANSPROJET_TESTI_GIT
	do
		$init "$1"
	done
}

DANSPROJET_TESTI="$DANSPROJET_TESTI testi_git"
DANSPROJET_TESTI_GIT=

#--- pp ---

testi_git_pp()
{
	pp_decalage=
	
	# Pousse-projet, ou pousse-pass√©.
	pp()
	{
		memeprojet || { [ $? = 2 ] && pp "$@" ; return ; }
		
		[ -n "$pp_decalage" ] || pp_decalage
		local q="`pp_maintenant`"
		q="`date -r "$q" +"%Y-%m-%d %H:%M:%S"`"
		GIT_AUTHOR_DATE="$q" GIT_COMMITTER_DATE="$q" gc "$@"
	}
}

DANSPROJET_TESTI_GIT="$DANSPROJET_TESTI_GIT testi_git_pp"

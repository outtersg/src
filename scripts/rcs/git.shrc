#!/bin/sh
# À inclure dans son .shrc

gs()
{
	git status "$@"
}

gd()
{
	git diff --relative "$@"
}

gc()
{
	local titre="$1" ; shift
	case "$1" in
		*" "*) titre="$titre||$1" ; shift ;;
	esac
	git commit -m "`echo "$titre" | tr \| '\012'`" "$@"
}

gp()
{
	git fetch && git stash && git pull --rebase "$@" && git stash apply
}

gr()
{
	git fetch && git stash && git rebase "$@" && git stash apply
}

glog()
{
	# https://stackoverflow.com/a/13965459
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit "$@"
}

# Git Soumission Comme Poussage (pour remettre la date de soumission égale à la date de poussage, par exemple durant un git rebase -i)
gscp()
{
	GIT_COMMITTER_DATE="`git log --pretty=format:%ad -1`" \
	GIT_COMMITTER_NAME="`git log --pretty=format:%an -1`" \
	GIT_COMMITTER_EMAIL="`git log --pretty=format:%ae -1`" \
	git commit --amend --no-edit
}

#- Projets ---------------------------------------------------------------------
# Fonctionnement dans le cadre de rcs/shrc.

testi_git()
{
	[ -d "$1/.git" ] || return
	
	local init
	for init in $DANSPROJET_TESTI_GIT
	do
		$init "$1"
	done
}

DANSPROJET_TESTI="$DANSPROJET_TESTI testi_git"
DANSPROJET_TESTI_GIT=

#--- pp ---

testi_git_pp()
{
	pp_decalage=
	
	# Pousse-projet, ou pousse-passé.
	pp()
	{
		memeprojet || { [ $? = 2 ] && pp "$@" ; return ; }
		
		[ -n "$pp_decalage" ] || pp_decalage
		local q="`pp_maintenant`"
		q="`date -r "$q" +"%Y-%m-%d %H:%M:%S"`"
		GIT_AUTHOR_DATE="$q" GIT_COMMITTER_DATE="$q" gc "$@"
	}
}

DANSPROJET_TESTI_GIT="$DANSPROJET_TESTI_GIT testi_git_pp"
